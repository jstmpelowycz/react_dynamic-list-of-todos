{"version":3,"sources":["enums/SelectOptions.ts","api/api.ts","contexts/SelectedUserIdContext.tsx","components/User/User.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["SelectOptions","request","endpoint","options","fetch","then","response","ok","json","console","error","status","statusText","updateTodo","id","complete","data","method","headers","body","JSON","stringify","SelectedUserIdContext","createContext","selectedUserId","setSelectedUserId","useSelectedUserIdContext","useContext","User","memo","userId","handleClear","useState","name","setName","email","setEmail","phone","setPhone","isAvailable","setAvailable","isFailed","setFailed","useEffect","user","catch","className","toLowerCase","type","onClick","TodoItem","title","completed","isChecked","setChecked","classNames","checked","onChange","event","result","target","log","warn","TodoList","todos","query","setQuery","String","All","option","setOption","processedTodos","setProcessedTodos","queryContains","useCallback","includes","filter","Completed","Active","placeholder","autoComplete","value","Object","keys","map","selectOption","App","setTodos","todosFromServer","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42258597.chunk.js","sourcesContent":["export enum SelectOptions {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n","/* eslint-disable no-console */\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (endpoint: string, options?: RequestInit) => {\n  return fetch(`${BASE_URL}${endpoint}`, options)\n    .then(response => {\n      if (!response.ok) {\n        console.error(`${response.status} - ${response.statusText}`);\n\n        return null;\n      }\n\n      return response.json();\n    });\n};\n\nconst patch = (endpoint: string, data: TodoUpdateType) => (\n  request(endpoint, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n);\n\nexport const getUserById = (id: number): Promise<User> => (\n  request(`/users/${id}`)\n);\n\nexport const getTodos = (): Promise<Todo[]> => (\n  request('/todos')\n);\n\nexport const updateTodo = (id: number, complete: boolean) => (\n  patch(`/todos/${id}`, { complete })\n);\n","import { createContext, useContext } from 'react';\n\nexport const SelectedUserIdContext\n  = createContext<SelectedUserId>({\n    selectedUserId: 0,\n    setSelectedUserId: () => {},\n  });\n\nexport const useSelectedUserIdContext = () => (\n  useContext(SelectedUserIdContext)\n);\n","import './User.scss';\nimport {\n  FC, memo, useEffect, useState,\n} from 'react';\nimport { getUserById } from '../../api/api';\nimport { useSelectedUserIdContext } from '../../contexts/SelectedUserIdContext';\n\nexport const User: FC = memo(() => {\n  const {\n    selectedUserId: userId,\n    setSelectedUserId: handleClear,\n  } = useSelectedUserIdContext();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const [isAvailable, setAvailable] = useState(true);\n  const [isFailed, setFailed] = useState(false);\n\n  useEffect(() => {\n    getUserById(userId)\n      .then(user => {\n        if (!user) {\n          setAvailable(false);\n        } else {\n          setName(user.name);\n          setEmail(user.email);\n          setPhone(user.phone);\n        }\n      })\n      .catch(() => setFailed(true));\n  }, [userId]);\n\n  return isAvailable ? (\n    <div className=\"User\">\n      <h2 className=\"User__title\">\n        <span>\n          {`Selected user: ${userId}`}\n        </span>\n      </h2>\n\n      <h3 className=\"User__name\">\n        {name}\n      </h3>\n\n      <p className=\"User__email\">\n        {email.toLowerCase()}\n      </p>\n\n      <p className=\"User__phone\">\n        {phone}\n      </p>\n\n      <button\n        className=\"User__clear button\"\n        type=\"button\"\n        onClick={() => handleClear(0)}\n      >\n        Clear\n      </button>\n    </div>\n  ) : (\n    <h2 className=\"User__error\">\n      {isFailed\n        ? 'Failed to load user!'\n        : 'Loading...'}\n    </h2>\n  );\n});\n","/* eslint-disable no-console */\n\nimport {\n  ChangeEvent,\n  FC, memo, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { useSelectedUserIdContext } from '../../contexts/SelectedUserIdContext';\nimport { updateTodo } from '../../api/api';\n\ntype Props = Omit<Todo, 'id'>;\n\nexport const TodoItem: FC<Props> = memo(({\n  userId, title, completed,\n}) => {\n  const [isChecked, setChecked] = useState(completed);\n  const {\n    selectedUserId,\n    setSelectedUserId,\n  } = useSelectedUserIdContext();\n\n  const handleCheckBoxChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const result = event.target.checked;\n\n    setChecked(result);\n    updateTodo(userId, result)\n      .then(console.log)\n      .catch(console.warn);\n  };\n\n  return (\n    <li className={classNames(\n      'TodoList__item',\n      {\n        'TodoList__item--checked': isChecked,\n        'TodoList__item--unchecked': !isChecked,\n      },\n    )}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isChecked}\n          onChange={handleCheckBoxChange}\n        />\n\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={classNames(\n          'button',\n          'TodoList__user-button',\n          { 'TodoList__user-button--selected': selectedUserId === userId },\n        )}\n        type=\"button\"\n        onClick={() => setSelectedUserId(userId)}\n      >\n        {`User #${userId}`}\n      </button>\n    </li>\n  );\n});\n","/* eslint-disable no-console */\n\nimport './TodoList.scss';\nimport {\n  FC, memo, useCallback, useEffect, useState,\n} from 'react';\nimport { TodoItem } from '../TodoItem';\nimport { SelectOptions } from '../../enums/SelectOptions';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: FC<Props> = memo(({ todos }) => {\n  const [query, setQuery] = useState('');\n  const [option, setOption] = useState(String(SelectOptions.All));\n  const [processedTodos, setProcessedTodos] = useState<Todo[]>(todos);\n\n  const queryContains = useCallback((title: string) => (\n    title.toLowerCase().includes(query.toLowerCase())\n  ), [todos, query, option]);\n\n  useEffect(() => {\n    const getProcessedTodos = (): Todo[] => (\n      todos.filter(({ title, completed }) => {\n        switch (option) {\n          case SelectOptions.All:\n            return queryContains(title);\n          case SelectOptions.Completed:\n            return queryContains(title) && completed;\n          case SelectOptions.Active:\n            return queryContains(title) && !completed;\n          default:\n            return false;\n        }\n      })\n    );\n\n    setProcessedTodos(getProcessedTodos);\n  }, [todos, query, option]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos</h2>\n\n      <div className=\"TodoList__controllers\">\n        <label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your todo...\"\n            autoComplete=\"off\"\n            value={query}\n            onChange={({ target }) => setQuery(target.value)}\n          />\n        </label>\n\n        <select\n          value={option}\n          onChange={({ target }) => setOption(target.value)}\n        >\n          {Object.keys(SelectOptions).map(selectOption => (\n            <option\n              key={selectOption}\n              value={selectOption}\n            >\n              {selectOption}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {processedTodos.map(({\n            id, userId, title, completed,\n          }) => (\n            <TodoItem\n              key={id}\n              userId={userId}\n              title={title}\n              completed={completed}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import './App.scss';\nimport './styles/general.scss';\nimport {\n  FC, memo, useEffect, useState,\n} from 'react';\nimport { User } from './components/User';\nimport { TodoList } from './components/TodoList';\nimport { SelectedUserIdContext } from './contexts/SelectedUserIdContext';\nimport { getTodos } from './api/api';\n\nexport const App: FC = memo(() => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <SelectedUserIdContext.Provider\n        value={{ selectedUserId, setSelectedUserId }}\n      >\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <User />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </SelectedUserIdContext.Provider>\n    </div>\n  );\n});\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}